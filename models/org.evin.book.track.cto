/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * https://github.com/coletiv/supplychain-composer-thesis/blob/master/Project/logistics-network/models/org.logistics.testnet.cto
 */

/**
 * Write your model definitions here
 */

namespace org.evin.book.track

concept Address{
  o String county optional
  o String country
  o String street optional
  o String zip optional
}

abstract participant bookNetMember identified by email{
  o String email
  o String memberId
  o String name optional
  o String firstName optional
  o String lastName optional
  o String userName
  o String avatar optional
  o String secret
  o String telephone optional
  // default 1, when logged in for the first time, update 0 after cookie
  o Integer firstTimeLogin default = 1 
  o Address address optional
  o Double accountBalance optional
  o DateTime createdAt optional
  o DateTime updatedAt optional
}

participant Distributor extends bookNetMember{
}

participant Publisher extends bookNetMember{
}

participant Customer extends bookNetMember{
  o String isRetailer default = "0"
}

participant Admin extends bookNetMember{
}
/**
 *  Government Regulator
 */
// participant Regulator identified by email{
//   o String regulatorName
//   o String email
//   o Address address
// }

asset OrderContract identified by contractId{
  o String contractId
  --> Customer buyer
  --> Publisher seller
  o DateTime arrivalDateTime
  o Boolean payOnArrival
  o Double unitPrice
  o Double quantity
  o String description
  o String destinationAddress
  o String statusMessage optional
  o OrderStatus orderStatus optional
  o Double lateArrivalPenaltyFactor optional
  o Double damagedPenaltyFactor optional
  o Double lostPenaltyFactor optional
  o DateTime createdAt optional
  o DateTime updatedAt optional
}

asset Shipment identified by shipmentId {
  o String shipmentId
  o ShipmentStatus ShipmentStatus
  o ItemStatus itemStatus
  o String message optional
  o String statusMessage optional
  o String feedbackMessage optional
  o String feedbackScale optional
  o Long unitCount
  o Location location optional
  o BookRegisterShipment[] bookRegisterShipment optional
  o ShipOwnership[] shipOwnership optional
  --> OrderContract contract
  o DateTime createdAt optional
  o DateTime updatedAt optional
}

abstract transaction ShipmentTransaction{
  --> Shipment shipment
}

transaction ShipOwnership extends ShipmentTransaction{
   --> bookNetMember owner
}

transaction BookRegisterShipment extends ShipmentTransaction{
  o String serials optional
  --> Book book
}

transaction ShipmentReceived extends ShipmentTransaction{
}

// transaction VerifyBook extends ShipmentTransaction{
//   o String serials
// }

// transaction UpdateShipment extends ShipmentTransaction{
//   o ShipmentStatus ShipmentStatus
//   o Location newLocation
//   o String message optional
//   --> bookNetMember newHolder optional
// }
event ShipmentUpdate  {
  --> Shipment shipment
}

enum ShipmentStatus{
  o WAITING
  o DISPATCHING
  o SHIPPED_IN_TRANSIT
  o CANCELED
  o DELIVERED
  o LOST
} 

enum OrderStatus{
  o WAITING
  o PROCESSED
  o DELIVERED
  o CANCELED
} 

enum ItemStatus {
  o GOOD
  o DAMAGED
  o LOST
}

concept Location {
  o String latLong // global location number
  o Address address optional
}

/**
 * Hyperledger tutorial video 5 25:55 REST API
 * https://github.com/jackjulianhickey/Hyperledger-Insurance-Tutorial/blob/master/risk-analysis-tutorial/models/org.acme.riskanalysis.cto 
 */
 concept BookDetails {
  o String type
  o String author
  o String description
  o Double price
  o ItemCondition itemCondition
  o Location location
  // o NewOwnership[] newOwnership
}
asset Book identified by id {
  o String id
  o String type
  o String author
  o String edition 
  o String description
  o Boolean sold
  o Double price
  o ItemCondition itemCondition optional
  o Location location optional
  --> bookNetMember owner optional
  --> bookNetMember addedBy
  --> Shipment shipment optional
  o DateTime createdAt optional
  o DateTime updatedAt optional
}

transaction updateBookSold{
  --> Book book
  o Boolean sold
  o DateTime updatedAt
  --> bookNetMember participantInvoking
}

abstract transaction BookTransaction{
  --> Book book
}

asset Report identified by id {
  o String id
  o String ward
  o String location optional
  o String longitude optional
  o String latitude optional
  o String description
  --> Book book 
  --> bookNetMember reportedBy 
  --> bookNetMember reportedTo 
  --> bookNetMember store
  o Boolean isConfirmed default = false
  o DateTime createdAt optional
  o DateTime updatedAt optional
}

transaction updateReportIsConfirmed{
  --> Report report
  o Boolean isConfirmed
  o DateTime updatedAt
  --> bookNetMember participantInvoking
}

asset PurchaseRequest identified by id {
  o String id
  --> Book book
  --> bookNetMember purchasedBy 
  --> bookNetMember purchasedTo 
  o Boolean status default = false
  o DateTime createdAt optional
  o DateTime updatedAt optional
}

transaction updatePurchaseRequestStatus{
  --> PurchaseRequest purchaseRequest
  o Boolean status
  o DateTime updatedAt
  --> bookNetMember participantInvoking
}


event NewBookCreated {
    o Book book
}

concept ItemCondition {
  o String conditionDescription
  o ItemStatus status
}

event changeBookOwnershipEvent{
--> Book book
--> bookNetMember newOwner
--> bookNetMember oldOwner
}

transaction updateBookShipment{
   --> Book book
   --> Shipment shipmentId
   o DateTime updatedAt
   --> bookNetMember participantInvoking
}

transaction updateOrderStatus{
  --> OrderContract order
  o String orderStatus
  o DateTime updatedAt
  --> bookNetMember participantInvoking
}

transaction updateShipmentStatus{
  --> Shipment shipment
  o String ShipmentStatus
  o DateTime updatedAt
  --> bookNetMember participantInvoking
}

transaction updateShipmentItemStatus{
  --> Shipment shipment
  o String itemStatus
  o DateTime updatedAt
  --> bookNetMember participantInvoking
}

transaction updateShipmentReview{
  --> Shipment shipment
  o String feedbackMessage optional
  o String feedbackScale
}

transaction updateCustomerPoints{
   --> Customer customer
   o Double accountBalance
   o DateTime updatedAt
   --> bookNetMember participantInvoking
}

transaction uploadCustomerProfilePic{
  o String avatar
  --> Customer customer
}

transaction uploadDistributorProfilePic{
  o String avatar
  --> Distributor distributor
}

transaction uploadPublisherProfilePic{
  o String avatar
  --> Publisher publisher
}

/**
 * JUST FOR INITIALIZING A DEMO
 */
transaction EvinBookSetupDemo {
}

/**
 * TESTING ASSET HISTORY
 */

 asset Commodity identified by tradingSymbol {
  o String tradingSymbol
  o String description
  o String mainExchange
  o Double quantity
  --> Trader owner
}

participant Trader identified by tradeId {
  o String tradeId
  o String firstName
  o String lastName
}

transaction Trade {
  --> Commodity commodity
  --> Trader newOwner
}

event TradeNotification {
  --> Commodity commodity
}

transaction TradeBookOwnership {
  --> Book book
  --> bookNetMember newOwner
}

event TradeBookNotification {
  --> Book book
}

